#!/bin/bash

# Important variables.
OUTPUT_DIR="$HOME/.cache/shwal"
TEMPLATE_DIR="$HOME/.config/shwal/templates"
SCRIPTS_DIR="$HOME/.config/shwal/scripts"
cols_gen=false

# Check for the existance of output dir.
mkdir -p "$OUTPUT_DIR"

# Function to calculate the luminance of a color
luminance() {
    local hex=$1
    local r=$(printf "%d" "0x${hex:1:2}")
    local g=$(printf "%d" "0x${hex:3:2}")
    local b=$(printf "%d" "0x${hex:5:2}")
    echo "scale=4; 0.2126 * $r + 0.7152 * $g + 0.0722 * $b" | bc
}

# Sort colors based on luminance
sort_colors(){
    declare -A luminance_values

    for color in "${colors[@]}"; do
        luminance_values[$color]=$(luminance "$color")
    done

    sorted_colors=($(for color in "${!luminance_values[@]}"; do
        echo "$color ${luminance_values[$color]}"
    done | sort -n -k 2 | awk '{print $1}'))
    colors=("${sorted_colors[@]}")
}

# Get colors from an image
colors(){
    max_attempts=10
    attempt=1
    colors=()
    echo -ne "[ ] Colors: Creating colorscheme attempt #$attempt"
    while [ ${#colors[@]} -lt 16 ] && [ $attempt -le $max_attempts ]; do
        echo -ne "\r[S] Colors: Creating colorscheme attempt #$attempt"
        magick "$1" -resize 25% -colors 16 -unique-colors txt:- | tail -n +2 | awk '{print $3}' > "$OUTPUT_DIR/colors"
        mapfile -t colors < "$OUTPUT_DIR/colors"
        attempt=$((attempt + 1))
    done

    if [ "${#colors[@]}" -lt 16 ]; then
        echo -e "\r[ ] Colors: No change in colorscheme. Not enough colors extracted."
    else
        sort_colors
        echo -e "\r[S] Colors: Colorsheme created and saved.  "
        cols_gen=true
    fi
}

# Get and set colorscheme from json file.
colors_from_json(){
    if ! command -v jq &> /dev/null; then
        echo "[E] JSON Colors: 'jq' command not found. Please install 'jq' to use this feature."
        exit 1
    fi

    json_file="$1"
    colors=()
    echo -ne "[ ] JSON colors: Reading colors from JSON file."

    background=$(jq -r '.special.background' "$json_file")
    foreground=$(jq -r '.special.foreground' "$json_file")
    cursor=$(jq -r '.special.cursor' "$json_file")

    for i in {0..15}; do
        colors+=($(jq -r ".colors.color$i" "$json_file"))
    done

    if [ "${#colors[@]}" -lt 16 ]; then
        echo "[ ] JSON Colors: JSON file does not contain enough colors."
        exit 1
    fi

    echo "$background" > "$OUTPUT_DIR/colors"
    echo "$foreground" >> "$OUTPUT_DIR/colors"
    echo "$cursor" >> "$OUTPUT_DIR/colors"
    for color in "${colors[@]}"; do
        echo "$color" >> "$OUTPUT_DIR/colors"
    done

    echo -e "\r[S] JSON Colors: Colorscheme created from JSON file and saved."
    cols_gen=true
}

# Set BG using feh
set_wallpaper(){
    echo -ne "[ ] Wallpaper: set."
    feh --bg-fill "$1"
    echo "$1" > ~/.cache/shwal/wallpaper
    echo -e "\r[S] Wallpaper: set."
}

# Check for template files and process them
templates(){
    if [ -d "$TEMPLATE_DIR" ]; then
        echo -ne "[ ] Templates: Processed templates."

        # Assign colors to variables
        background="${colors[0]:0:7}"
        foreground="${colors[7]:0:7}"
        cursor="${colors[8]:0:7}"
        color0="${colors[0]:0:7}"
        color1="${colors[1]:0:7}"
        color2="${colors[2]:0:7}"
        color3="${colors[3]:0:7}"
        color4="${colors[4]:0:7}"
        color5="${colors[5]:0:7}"
        color6="${colors[6]:0:7}"
        color7="${colors[7]:0:7}"
        color8="${colors[8]:0:7}"
        color9="${colors[9]:0:7}"
        color10="${colors[10]:0:7}"
        color11="${colors[11]:0:7}"
        color12="${colors[12]:0:7}"
        color13="${colors[13]:0:7}"
        color14="${colors[14]:0:7}"
        color15="${colors[15]:0:7}"

        for template in "$TEMPLATE_DIR"/*; do
            template_name=$(basename "$template")
            output_template="$OUTPUT_DIR/$template_name"

            # Replace placeholders in the template

            sed \
                -e "s/{background}/$background/g" \
                -e "s/{foreground}/$foreground/g" \
                -e "s/{cursor}/$cursor/g" \
                -e "s/{color0}/$color0/g" \
                -e "s/{color1}/$color1/g" \
                -e "s/{color2}/$color2/g" \
                -e "s/{color3}/$color3/g" \
                -e "s/{color4}/$color4/g" \
                -e "s/{color5}/$color5/g" \
                -e "s/{color6}/$color6/g" \
                -e "s/{color7}/$color7/g" \
                -e "s/{color8}/$color8/g" \
                -e "s/{color9}/$color9/g" \
                -e "s/{color10}/$color10/g" \
                -e "s/{color11}/$color11/g" \
                -e "s/{color12}/$color12/g" \
                -e "s/{color13}/$color13/g" \
                -e "s/{color14}/$color14/g" \
                -e "s/{color15}/$color15/g" \
                "$template" > "$output_template"
        done
        echo -e "\r[S] Templates: Processed templates."
    else
        echo "[ ] Templates: No templates found in $TEMPLATE_DIR."
    fi
}

# Exec a script after succesfully setting a colorscheme.
scripts() {
    echo -ne "[ ] Script: Running external scripts."
    # Check if the directory exists
    if [[ ! -d "$SCRIPTS_DIR" ]]; then
        echo -e "\r[E] Script: No script found."
        exit 1
    fi
    echo -e "\r[S] Script: Running external script"
    # Iterate over all files in the directory
    for file in "$SCRIPTS_DIR"/*; do
        # Check if it's a regular file and if it's executable
        if [[ -f "$file" && -x "$file" ]]; then
            "$file" > /dev/null 2>&1 # Execute the file
            if [ $? -eq 1 ]; then
                echo -e "\r[E] Script: External script execution failed."
                exit 1
            fi
        fi
    done
    echo -ne "[S] Script: External scripts run."
}

# Help string
help_text(){
    echo 
    echo "Usage: shwal [OPTIONS] [FILE]"
    echo "Set wallpaper and generate colorscheme from an image."
    echo
    echo "Options:"
    echo "  -i <image>    Set wallpaper and generate colorscheme from <image>."
    echo "  -j <json>     load colorscheme from <json>."
    echo "  -r            Restore wallpaper."
    echo
    echo "Examples:"
    echo "  shwal -i ~/Pictures/wallpaper.jpg"
    echo "  shwal -j ~/Files/gruvbox.json"
    echo "  shwal -r"
    echo
    echo "Note:"
    echo "  -i will set the wallpaper and also change the colorschome while"
    echo "  -j will only make changes to the colorscheme"
    echo 
}

cols_gen_check(){
    if [ $cols_gen != true ]; then
        echo "[ ] Templates: not processed. colorscheme not generated."
        echo "[ ] Script: Not run. colorscheme not generated."
        exit 1
    fi
}

# MAIN
case $1 in
    "-i")
        if file --mime-type "$2" | grep -q "image"; then
            set_wallpaper $2
            colors $2
            cols_gen_check
            templates
            scripts
        else
            echo "Try: shwal -h"
        fi
        ;;
    "-j")
        if file --mime-type "$2" | grep -q "json"; then
            colors_from_json $2
            cols_gen_check
            templates
            scripts
        else
            echo "Try: shwal -h"
        fi
        ;;
    "-r")
        wallpaper=$(head "$OUTPUT_DIR/wallpaper" -n 1  | sed 's/[[:space:]]S$//') > /dev/null 2>&1
        if [ -e "$wallpaper" ]; then
            set_wallpaper $wallpaper
        else
            echo "Try: shwal -h"
        fi
        ;;
    *)
        help_text
        ;;
esac

# End
